local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "EVIL",
   LoadingTitle = "Evil Dev.",
   LoadingSubtitle = "by Makio",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Evil Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "aVzzCtBvSU", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "EVIL",
      Subtitle = "Key System",
      Note = "Key: EvilDev",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"EvilDev"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Teleport", 4483362458) -- Title, Image

local Button = Tab:CreateButton({
   Name = "Win",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").EndArea.Chest.CFrame
   end,
})

local Button = Tab:CreateButton({
   Name = "Spawn",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").SpawnLocations.Lobby.CFrame
   end,
})

Rayfield:Notify({
   Title = "Evil",
   Content = "Thank you, like and comment my scripts.",
   Duration = 6.5,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okey",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

local Tab = Window:CreateTab("AutoFarm", 4483362458) -- Title, Image

local Button = Tab:CreateButton({
   Name = "AutoFarm (1 click)",
   Callback = function()
      for i = 1, 100000 do
	   print("AutoFarm On")
	   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").EndArea.Chest.CFrame
	   wait(1)
	   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Teleporters.HardFinish.Detector.CFrame
	   wait(1)
	   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Teleporters.HardFinish.Detector.CFrame
	   wait(1)
	   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Teleporters.EasyFinish.Detector.CFrame
	   wait(1)
	   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Teleporters.RainbowStaircaseFinish.Detector.CFrame
	   wait(1)
	  end
   end,
})

local Tab = Window:CreateTab("Player", 4483362458) -- Title, Image

local Slider = Tab:CreateSlider({
   Name = "Speed",
   Range = {10, 100},
   Increment = 5,
   Suffix = "Speed",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(SpeedS)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = SpeedS
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

local Slider = Tab:CreateSlider({
   Name = "Jump",
   Range = {10, 500},
   Increment = 5,
   Suffix = "JumpPower",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(jumpS)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpS
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

Rayfield:LoadConfiguration()

